/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
option java_package = "org.apache.phoenix.coprocessor.generated";
option java_outer_classname = "RegionServerEndpointProtos";
option java_generic_services = true;
option java_generate_equals_and_hash = true;
option optimize_for = SPEED;

message ValidateLastDDLTimestampResponse {
}

message ValidateLastDDLTimestampRequest {
  repeated LastDDLTimestampRequest lastDDLTimestampRequests = 1;
}

message LastDDLTimestampRequest {
  // Will be HConstants.EMPTY_BYTE_ARRAY if tenantID or schema name is null.
  required bytes tenantId = 1;
  required bytes schemaName = 2;
  required bytes tableName = 3;
  required int64 lastDDLTimestamp = 4;
}

message InvalidateServerMetadataCache {
  // Will be HConstants.EMPTY_BYTE_ARRAY if tenantID or schema name is null.
  required bytes tenantId = 1;
  required bytes schemaName = 2;
  required bytes tableName = 3;
}

message InvalidateServerMetadataCacheResponse {
}

message InvalidateServerMetadataCacheRequest {
  repeated InvalidateServerMetadataCache invalidateServerMetadataCacheRequests = 1;
}

message InvalidateHAGroupStoreClientRequest {
  required bytes haGroupName = 1;
  required bool broadcastUpdate = 2;
}

message InvalidateHAGroupStoreClientResponse {
}

message GetClusterRoleRecordRequest {
  required bytes haGroupName = 1;
}

message GetClusterRoleRecordResponse {
  // In case of single cluster configuration, one of the urls and roles can be empty
  required bytes haGroupName = 1;
  required bytes policy = 2;
  optional bytes url1 = 3;
  optional bytes role1 = 4;
  optional bytes url2 = 5;
  optional bytes role2 = 6;
  optional int64 version = 7;
}

service RegionServerEndpointService {
  rpc validateLastDDLTimestamp(ValidateLastDDLTimestampRequest)
      returns (ValidateLastDDLTimestampResponse);

  rpc invalidateServerMetadataCache(InvalidateServerMetadataCacheRequest)
      returns (InvalidateServerMetadataCacheResponse);

  rpc invalidateHAGroupStoreClient(InvalidateHAGroupStoreClientRequest)
      returns (InvalidateHAGroupStoreClientResponse);

  rpc getClusterRoleRecord(GetClusterRoleRecordRequest)
      returns (GetClusterRoleRecordResponse);
}